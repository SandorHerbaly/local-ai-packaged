version: "3.9"

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  nextjs: # Új volume a Next.js számára

networks:
  demo:
    driver: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
  links:
    - postgres

services:
  nginx:
    image: nginx:latest
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "9000:9000"  # módosítva 8080:8080-ról
      - "9443:9443"  # módosítva 8443:8443-ról
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./letsencrypt:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    depends_on:
      - n8n

  certbot:
    image: certbot/certbot
    networks: ['demo']
    entrypoint: ["tail", "-f", "/dev/null"]
    volumes:
      - ./letsencrypt:/etc/letsencrypt

  flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
      - PORT=3001
    ports:
      - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    networks: ['demo']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    build:
      context: ./ # A PostgreSQL Dockerfile a LOCAL-AI-PACKAGED mappában van
      dockerfile: ./Dockerfile # A PostgreSQL Dockerfile neve
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    image: n8nio/n8n:1.73.1
    container_name: n8n
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5678:5678
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy

  seamless-communication:
    image: python:3.10-slim
    networks: ['demo']
    container_name: seamless_communication
    working_dir: /app
    volumes:
      - C:/Users/Sanyi/Documents/github_repos/seamless_communication/seamless_communication:/app
    command: ["tail", "-f", "/dev/null"]
    environment:
      - PYTHONUNBUFFERED=1

  ollama:
    image: ollama/ollama:latest
    networks: ['demo']
    restart: unless-stopped
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_storage:/root/.ollama
    extra_hosts:
      - "host.docker.internal:host-gateway"

  nextjs: # Új szolgáltatás a Next.js számára
    build:
      context: ./excel-invoice-processor # A Next.js projekt gyökérkönyvtára
      dockerfile: ./excel-invoice-processor/Dockerfile # A Next.js Dockerfile neve
    networks: ['demo']
    ports:
      - "3002:3000" # Kívülről a 3002-es porton lesz elérhető
    volumes:
      - nextjs:/app/.next # Persistáljuk a .next mappát
    depends_on:
      - postgres # Ha szükséged van az adatbázisra
    environment:
      - POSTGRES_URL=postgres://postgres:20Postgre14!@postgres:5432/n8n # Adatbázis URL a containeren belül
      - DATABASE_URL=postgresql://postgres:20Postgre14!@postgres:5432/n8n

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    volumes:
      - qdrant_storage:/qdrant/storage
    ports:
      - 6333:6333
    networks: ['demo']